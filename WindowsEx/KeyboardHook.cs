using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Woof.WindowsEx1 {

    /// <summary>
    /// Creates a system-wide keyboard shortcuts.
    /// </summary>
    public sealed class KeyboardHook : IDisposable {

        /// <summary>
        /// Occurs when a hot key has been pressed.
        /// </summary>
        public event EventHandler<HotKeyPressedEventArgs> HotKeyPressed;

        /// <summary>
        /// Creates a new keyborad hook virtual window to listen to hot key events.
        /// </summary>
        public KeyboardHook() => _Window.HotKeyPressed += delegate (object sender, HotKeyPressedEventArgs args) {
            HotKeyPressed?.Invoke(this, args);
        };

        /// <summary>
        /// Registers a hot key in the system.
        /// </summary>
        /// <param name="modifier">The modifiers that are associated with the hot key.</param>
        /// <param name="key">The key itself that is associated with the hot key.</param>
        /// <exception cref="InvalidOperationException">Thrown when <see cref="NativeMethods.RegisterHotKey(IntPtr, int, uint, uint)"/> returned false.</exception>
        public void RegisterHotKey(ModifierKeys modifier, Keys key) {
            if (!NativeMethods.RegisterHotKey(_Window.Handle, ++_CurrentId, (uint)modifier, (uint)key)) throw new InvalidOperationException();
        }

        /// <summary>
        /// Unregisters registered keys and disposes the virtual window.
        /// </summary>
        public void Dispose() {
            for (int i = _CurrentId; i > 0; i--) NativeMethods.UnregisterHotKey(_Window.Handle, i);
            _Window.Dispose();
        }

        /// <summary>
        /// Virtual window instance.
        /// </summary>
        HostWindow _Window = new HostWindow();

        /// <summary>
        /// Current hot key identifier index.
        /// </summary>
        int _CurrentId;

        /// <summary>
        /// Virtual window with a handle and a window procedure.
        /// </summary>
        private sealed class HostWindow : NativeWindow, IDisposable {

            /// <summary>
            /// Occurs when a hot key is pressed.
            /// </summary>
            public event EventHandler<HotKeyPressedEventArgs> HotKeyPressed;

            /// <summary>
            /// Creates a virtual window with handle.
            /// </summary>
            public HostWindow() => CreateHandle(new CreateParams());

            /// <summary>
            /// Hot key message.
            /// </summary>
            const int WM_HOTKEY = 0x0312;

            /// <summary>
            /// Processed hot key messages.
            /// </summary>
            /// <param name="m">Windows message.</param>
            protected override void WndProc(ref Message m) {
                base.WndProc(ref m);
                if (m.Msg == WM_HOTKEY && HotKeyPressed != null) {
                    Keys key = (Keys)(((int)m.LParam >> 16) & 0xFFFF);
                    ModifierKeys modifier = (ModifierKeys)((int)m.LParam & 0xFFFF);
                    HotKeyPressed(this, new HotKeyPressedEventArgs(modifier, key));
                }
            }

            /// <summary>
            /// Disposes the window properly.
            /// </summary>
            public void Dispose() => DestroyHandle();

        }

        /// <summary>
        /// Win32 API calls.
        /// </summary>
        static class NativeMethods {

            /// <summary>
            /// Defines a system-wide hot key.
            /// </summary>
            /// <param name="hWnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
            /// <param name="id">The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see Remarks for the action taken.</param>
            /// <param name="fsModifiers">The keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.</param>
            /// <param name="vk">The virtual-key code of the hot key.</param>
            /// <returns>True if the function succeeds.</returns>
            [DllImport("user32.dll")]
            public static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);


            /// <summary>
            /// Frees a hot key previously registered by the calling thread.
            /// </summary>
            /// <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.</param>
            /// <param name="id">The identifier of the hot key to be freed.</param>
            /// <returns>True if the function succeeds.</returns>
            [DllImport("user32.dll")]
            public static extern bool UnregisterHotKey(IntPtr hWnd, int id);

        }

    }

    /// <summary>
    /// Event arguments for the <see cref="KeyboardHook.HotKeyPressed"/> event.
    /// </summary>
    public class HotKeyPressedEventArgs : EventArgs {

        /// <summary>
        /// Gets the modifier key pressed.
        /// </summary>
        public ModifierKeys Modifier { get; }

        /// <summary>
        /// Gets the actual key pressed.
        /// </summary>
        public Keys Key { get; }

        /// <summary>
        /// Creates a new instance of <see cref="HotKeyPressedEventArgs"/>.
        /// </summary>
        /// <param name="modifier">Modifier key pressed.</param>
        /// <param name="key">Actual key pressed.</param>
        internal HotKeyPressedEventArgs(ModifierKeys modifier, Keys key) {
            Modifier = modifier;
            Key = key;
        }

    }

    /// <summary>
    /// Possible modifiers enumerations.
    /// </summary>
    [Flags]
    public enum ModifierKeys : uint {
        Alt = 1,
        Control = 2,
        Shift = 4,
        Win = 8
    }

}